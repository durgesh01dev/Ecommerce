1. Created two js files namely app.js and server.js

2. now initialize the nodejs project
npm init

{
  "name": "ecommerce",
  "version": "1.0.0",
  "description": "e-commerce application using MERN stack",
  "main": "backend/server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/durgesh01dev/Ecommerce.git"
  },
  "author": "durgesh kumar",

3. install express, mongoose, and dotenv dependencies
npm i express mongoose dotenv

4. significance of gitignore files
https://careerkarma.com/blog/gitignore/

5. Configuring port number using dotenv
https://www.dotenv.org/docs/how-to/use-dotenv-with-express

6. installing nodemon
=> for automatic restarting the node application whenever the file changes.
=> https://www.npmjs.com/package/nodemon

7. Adding attributes in package.json within the scripts key
"start": "node backend/server.js",
"dev" : "nodemon backend/server.js"

8. Making routes and controllers folder within the backend folder
9. undefined value for port number
https://stackoverflow.com/questions/71170213/server-port-undefined-in-node

Current url path is:
http://localhost:4000/api/v1/products

=> To run the server, use the command, npm run dev

10. connecting the mongoDB database
=> The connectDatabase defined within the database.js file is responsible for connecting the mongoDB along with the server.
=> The databse url is defined dotenv file named  config.env as-
DB_URI = "mongo://localhostL27017/Ecommerce"
=> The parsing error with the DB_URI arises
//MongoParseError: Invalid scheme, expected connection string to start with "mongodb://" or "mongodb+srv://"
FIXED by using mongodb in DB_URI.

=> Error, MongoParseError: option usecreateindex is not supported at parseOptions 
The mongoose version used is 6.7, here  useNewUrlParser, useUnifiedTopology, useFindAndModify, and useCreateIndex are always true and .useFindAndModify is false. No need to use them explicitly in code
FIXED by
-> https://namespaceit.com/blog/mongoparseerror-options-usecreateindex-usefindandmodify-are-not-supported

=> Error, MongooseServerSelectionError: connect ECONNREFUSED ::1:27017
-> This means mongodb is not started yet, first start it., DB_URI = "mongodb://localhost:27017/Ecommerce" did not work 
->The url approach worked as- 
  DB_URI = "mongodb://127.0.0.1/Ecommerce"


11. MAKING ROUTES NOW
A. First make product model, productModel.js
productSchema developed having attributes like 
  name,  description,  price,  rating,
  images is array of object which comprises internal properties for public_id, and url fields,
  category,  Stock  numOfReviews,
  reviews is array of object which comprises name, rating, comment,
  createdAt

12. productController.js file
i. import the productModel.js
ii. define method to createProduct by storing the product details from the request body.
iii. This call is async-await, since it can take any number of time.
iv. Provide the route to create a new product in Ecommerce database, within the productRoute.js file
-> router.route('/product/new').post(createProduct);
v. Required url is 
http://localhost:4000/api/v1/products/new

13. Api calls for createProduct and getAllProducts are working fine.
Duplicate products are also stored for now.


14. Api for updating the product by id - ADMIN
=> To access path parameter use request.params.path_variable_name
=> Find the product by id using findById method
=> further if product exists, then for updation use the function findByIdAndUpdate.

15. API for deleting the product by ID - ADMIN
=> First check if product with mentioned id exists or not
  const product = await Product.findById(req.params.id);
=> if exists, then use the remove function with await.
=> The product is still connect with collection, therefore remove can be used.

16. Get detail of one product
=> first check if the product with specified id exists or not
=> If not exists then return 500 along with success false 
=> if exists and return the product along with status 200
http://localhost:4000/api/v1/products/6363e41948385d4ed644fcc1

Update product by id, delete product by id, and get details of product by id are done.

17. To set different themes for the folders and the files, install the material icon them..

18. to handle different kind of errors, the ErrorHandler class is created within the utils folder in backend
=> for scenarios when product is not found by id.
=> The ErrorHandler is defined for handling product not found scenario

19. Making middleware folder within the backend folder. Further make error.js as the middleware which uses the ErrorHandler class from the errorHandler.js

=>. Setting middleware in app.js now after importing the error.js
//setting error middleware to handle errors
app.use(ErrorMiddleware);

=>  setting error middleware in controllers now.
For invalid id, provided it can be cast without error then following error comes-
-> TypeError: res.status is not a function
-> it came since order of req, and res is not followed, first req need to be given res within the error.js
module.exports = (err, res, req, next) => {} //INCORRECT
module.exports = (err, req, res, next) => {}//CORRECT ORDER

20. For any request which violates the model requirements and constraints, the issue will arise, for that try-catch or handler needs to be defined.
=> For async-await operations, it is recommended to use try-catch or handler along with async-await.
-> The try-catch for each async-await operation will increase the code by a significant amount

=> The AsyncErrorHandler is defined as middleware which use Promise internally along with catch.
=> Putting AsyncErrorHandler for each async-await operation within the productController.
-> for createProduct, getAllProducts, getProductDetail, updateProduct, and deleteProduct the errorHandler, AsyncErrorHandler is defined as a wrapper over each of the function definitions.
=> For id which can't be casted those issues are also handled, preventing server errors.

AsyncErrorHandler is attached for all the async-await operations.

21. The unhandled Promise rejection is handled
=> As soon as this rejection event happens, the server is closed
=> the catch block for the  connectDatabase function with the datbase.js is removed to handle that using the unhandled Promise rejection.
-> Example, invalid DB_URI
-> any undefined variable or function usage will be caught by this.
-> it is defined within the server.js file

unhandled Promise rejection event is defined within the server.js file

22. Explicit error handling for CastError when casting id is also defined.
-> The CastError subjected to ID is explicitly handled within the error.js file