1. Created two js files namely app.js and server.js

2. now initialize the nodejs project
npm init

{
  "name": "ecommerce",
  "version": "1.0.0",
  "description": "e-commerce application using MERN stack",
  "main": "backend/server.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/durgesh01dev/Ecommerce.git"
  },
  "author": "durgesh kumar",

3. install express, mongoose, and dotenv dependencies
npm i express mongoose dotenv

4. significance of gitignore files
https://careerkarma.com/blog/gitignore/

5. Configuring port number using dotenv
https://www.dotenv.org/docs/how-to/use-dotenv-with-express

6. installing nodemon
=> for automatic restarting the node application whenever the file changes.
=> https://www.npmjs.com/package/nodemon

7. Adding attributes in package.json within the scripts key
"start": "node backend/server.js",
"dev" : "nodemon backend/server.js"

8. Making routes and controllers folder within the backend folder
9. undefined value for port number
https://stackoverflow.com/questions/71170213/server-port-undefined-in-node

Current url path is:
http://localhost:4000/api/v1/products

=> To run the server, use the command, npm run dev

10. connecting the mongoDB database
=> The connectDatabase defined within the database.js file is responsible for connecting the mongoDB along with the server.
=> The databse url is defined dotenv file named  config.env as-
DB_URI = "mongo://localhostL27017/Ecommerce"
=> The parsing error with the DB_URI arises
//MongoParseError: Invalid scheme, expected connection string to start with "mongodb://" or "mongodb+srv://"
FIXED by using mongodb in DB_URI.

=> Error, MongoParseError: option usecreateindex is not supported at parseOptions 
The mongoose version used is 6.7, here  useNewUrlParser, useUnifiedTopology, useFindAndModify, and useCreateIndex are always true and .useFindAndModify is false. No need to use them explicitly in code
FIXED by
-> https://namespaceit.com/blog/mongoparseerror-options-usecreateindex-usefindandmodify-are-not-supported

=> Error, MongooseServerSelectionError: connect ECONNREFUSED ::1:27017
-> This means mongodb is not started yet, first start it., DB_URI = "mongodb://localhost:27017/Ecommerce" did not work 
->The url approach worked as- 
  DB_URI = "mongodb://127.0.0.1/Ecommerce"


11. MAKING ROUTES NOW
A. First make product model, productModel.js
productSchema developed having attributes like 
  name,  description,  price,  rating,
  images is array of object which comprises internal properties for public_id, and url fields,
  category,  Stock  numOfReviews,
  reviews is array of object which comprises name, rating, comment,
  createdAt

12. productController.js file
i. import the productModel.js
ii. define method to createProduct by storing the product details from the request body.
iii. This call is async-await, since it can take any number of time.
iv. Provide the route to create a new product in Ecommerce database, within the productRoute.js file
-> router.route('/product/new').post(createProduct);
v. Required url is 
http://localhost:4000/api/v1/products/new

13. Api calls for createProduct and getAllProducts are working fine.
Duplicate products are also stored for now.


14. Api for updating the product by id - ADMIN
=> To access path parameter use request.params.path_variable_name
=> Find the product by id using findById method
=> further if product exists, then for updation use the function findByIdAndUpdate.

15. API for deleting the product by ID - ADMIN
=> First check if product with mentioned id exists or not
  const product = await Product.findById(req.params.id);
=> if exists, then use the remove function with await.
=> The product is still connect with collection, therefore remove can be used.

16. Get detail of one product
=> first check if the product with specified id exists or not
=> If not exists then return 500 along with success false 
=> if exists and return the product along with status 200
http://localhost:4000/api/v1/products/6363e41948385d4ed644fcc1

Update product by id, delete product by id, and get details of product by id are done.

17. To set different themes for the folders and the files, install the material icon them..

18. to handle different kind of errors, the ErrorHandler class is created within the utils folder in backend
=> for scenarios when product is not found by id.
=> The ErrorHandler is defined for handling product not found scenario

19. Making middleware folder within the backend folder. Further make error.js as the middleware which uses the ErrorHandler class from the errorHandler.js

=>. Setting middleware in app.js now after importing the error.js
//setting error middleware to handle errors
app.use(ErrorMiddleware);

=>  setting error middleware in controllers now.
For invalid id, provided it can be cast without error then following error comes-
-> TypeError: res.status is not a function
-> it came since order of req, and res is not followed, first req need to be given res within the error.js
module.exports = (err, res, req, next) => {} //INCORRECT
module.exports = (err, req, res, next) => {}//CORRECT ORDER

20. For any request which violates the model requirements and constraints, the issue will arise, for that try-catch or handler needs to be defined.
=> For async-await operations, it is recommended to use try-catch or handler along with async-await.
-> The try-catch for each async-await operation will increase the code by a significant amount

=> The AsyncErrorHandler is defined as middleware which use Promise internally along with catch.
=> Putting AsyncErrorHandler for each async-await operation within the productController.
-> for createProduct, getAllProducts, getProductDetail, updateProduct, and deleteProduct the errorHandler, AsyncErrorHandler is defined as a wrapper over each of the function definitions.
=> For id which can't be casted those issues are also handled, preventing server errors.

AsyncErrorHandler is attached for all the async-await operations.

21. The unhandled Promise rejection is handled
=> As soon as this rejection event happens, the server is closed
=> the catch block for the  connectDatabase function with the datbase.js is removed to handle that using the unhandled Promise rejection.
-> Example, invalid DB_URI
-> any undefined variable or function usage will be caught by this.
-> it is defined within the server.js file

unhandled Promise rejection event is defined within the server.js file

22. Explicit error handling for CastError when casting id is also defined.
-> The CastError subjected to ID is explicitly handled within the error.js file

23. SEARCH, FILTER, PAGINATION
1:24:21 mins
Filter url for products
http://localhost:4000/products?keyword=productname
=> query is keyword and its value is someData.
-> Example- 
http://localhost:4000/api/v1/products?keyword=Product1

24. FILTER
24.1. Filtering products based on the category
=> Here filter function is defined within the ApiFeatures class.
=> Here we are creating a copy of the object, so that the original object does not get affected.
=> Further extra fields like keyword, page, limit are removed from the copied object.
-> keyword is typically a part of search functionality, since whenever a search is made, the term keyword is used.
-> Term page should not occur. 
-> limit should also be skipped. It is related to the page. 
Blow one is working fine-
http://localhost:4000/api/v1/products?name=Product 3&category= Clothings

24.2 Filter products based on price, to select items within a range
URL for now-
http://localhost:4000/api/v1/products?keyword=Product 3&price[gt]= 1000&price[lt]=10000
=> within mongoDB, $ needs to be used at start with operators like with the gt and lt
=> ERROR- Error: Resource not found. Invalid: Cast to Number failed for value \"{ gt: ' 1000', lt: '10000' }\" (type Object) at path \"price\" for model \"Product\"
-> Issue fixed by using JSON.stringify and JSON.parse.
URL is -
http://localhost:4000/api/v1/products?keyword=Product 3&price[lte]=15000&price[gte]=1000
gt is greater than, gte for greater than or equal to.
lt is less than, lte for less than or equal to.

Product search, filter products based on category, price-range etcetera, are working.
http://localhost:4000/api/v1/products?keyword=Product 3&Category= Clothings
http://localhost:4000/api/v1/products?keyword=Product 3&price[lte]=15000&price[gte]=1000

25 PAGINATION
Setting limit on number of products that can be shown on a single page.
=> defining the limit for product on single page in getAllProducts function as resultPerPage
=> define pagination method in ApiFeatures class and page the variable resultPerPage to method.
=> The limit for products to be skipped to be shown a given page is done.
=> setting the limit for number of results to be returned in MongoDB query.
-> db.collection.find().limit()
-> https://www.w3schools.in/mongodb/limiting-query-result
-> To count all the documents present within the database
const productCount = await Product.countDocuments();

URL-
http://localhost:4000/api/v1/products?Category= Clothings&page=3

Pagination part done, limiting number of products to be shown on a page.

26. BACKEND USER AND PASSWORD AUTHENTICATION
26.1 Installing the bcryptjs dependency
npm i bcryptjs jsonwebtoken validator nodemailer cookie-parser body-parser

1. bcryptjs use-
The data present within the database can be read easily if database is accessible, it is better to store password in encrypted form. 

2. jsonwebtoken
=> For generation of the access tokens
=> https://www.npmjs.com/package/bcryptjs

3. validator
=> for validating the email field, check if it is valid one
=> https://www.npmjs.com/package/validator

4. nodemailer
=> for easily sending mails within the nodejs
=> https://www.freecodecamp.org/news/use-nodemailer-to-send-emails-from-your-node-js-server/

5. cookie-parser
=> For storing token generated using jsonwebtoken in cookies

6. body-parser
=> It is body-parsing middleware in nodejs
=> https://www.npmjs.com/package/body-parser

27. Making a User Model
The fields it comprises includes-
  name,  email,  password,
  avatar has public_id and url,  role,
  resetPasswordToken: String,
  resetPasswordExpire: Date,

=> The select:false attribute ensures that when find method is called on the model, all fields except the attribute on select:false is used, should be returned.
-> This is normally used on password to prevent from returning when query is executed on the model.

28. Making a UserController
28.1 Function defined to register a user, further exported.
28.2 The userRoute is created, along with post request to handle the reguest having the url '/register' at the end. Further the route is exported
28.3 The exported route is used within the app.js.
=> Just after the product route, the route for the user is defined with url as '/api/v1'
=> URL to register the user + POST
http://localhost:4000/api/v1/register

29 Right now password is saved in plain text, it should be stored in encrypted form, so that even the database is comprised, the password remain safe, like another level of security.
29.1 use the bcryptjs within userModel.js file
29.2 Using the pre-save hook, a middleware, to execute prior to saving the document.
=> work on save event to encrypt the password prior to saving the database.
-> Also ensure the password is only encrypted if it has changed.
this.password = await bcrypt.hash(this.password, 10);
-> The normal function is used within pre-save hook function.

29.3 Pre-save hooks in mongoose.js
https://medium.com/@justinmanalad/pre-save-hooks-in-mongoose-js-cf1c0959dba2

30. JWT Token within the user model
=> Idea is to generate the token and save it in the cookie.
=> https://www.matoski.com/article/jwt-express-node-mongoose/#jwt
30.1 Possible errors
=> https://stackoverflow.com/questions/67756906/mongoose-schema-method-returning-is-not-a-function
=> official docs- 
https://mongoosejs.com/docs/guide.html#methods

30.2 Further call the getJWTToken method within the the registerUser function right before sending the response in UserController.js
30.3 Define values in env file, cong.env
=> JWT_EXPIRE and JWT_SECRET

30.4 Error is, https://stackoverflow.com/questions/58673430/error-secretorprivatekey-must-have-a-value
Ensure the spacing between the key and value is not there in env file.
=> https://9to5answer.com/secretorprivatekey-must-have-a-value

30.5 Login the user, define within the UserController file.
=> wrap the loginUser function within the AsyncErrorHandler
=> extract email, password by destructuring
=> further validate them, if invalid then return 400 bad request.
30.5.1 Now find the user having the specified email and use the select attribute to fetch the result based on password field.
30.5.2 Check in case the user does not exist, return unauthorized request, 401
30.5.3 Now compare the passwords if they match by calling the comparePassword function defined within the userModel.js file`
30.5.4 In case the password has matched, get the token by calling getJWTToken function.
30.5.5 Further return the success response along with token, 200 response code, OK

30.6 Define comparePassword function within the usermodel. 
=> Use the bcryptjs to compare the plain text entered password with the  encrypted password present within the datbase.
=> return await bcrypt.compare(enteredPassword, this.password);

31. Defining a separate tokenSender function in utils folder to remove redundant code for sending response.
=> This response comprises token in cookie and in response, user object, and status code

User login and registration process using the jwt token is done.

32. Defining the isAuthenticatedUser function is auth.js
32.1 Use the cookie-parser within the app.js file
32.2 Extract the token from the req.cookies along with the destructuring technique.
32.3 In case the token does not exist, send the response using the ErrorHandler along 401  bad request.
32.4 If token is valid, then verify the token with JWT secret key, and store the decodedData.
32.5 Now search user associated with the  decodedData.id in database. Further store it in request, as req.user
32.6 call the next one in line.


33. Define the logout user function in userController.
=> The values are stored in req.cookie function. 3 values are modified.
33.1 Set token as parameter 1
33.2 First value for token is null
33.3 for options,  expires is set at current date time, Date.now()
=>  Set httpOnly true.

33.4 Send the success response along with message Logged Out.

33.5 http://localhost:4000/api/v1/products
If an attempt is made access the products now, then message is- 
"success": false,
"message": "Error: Please Login to access this resource\

Normally to access all the available products, login is not required, here it is done just to check functionality.

Now the middleware to check  whether the user has been authenticated is implemented. Further functions loginUser, logout are implemented in userController successfully.

34. 
2:30:00 mins continue again...